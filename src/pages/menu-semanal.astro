---
import Layout from '../layouts/Layout.astro';
const diasSemana = ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado', 'Domingo'];
const comidas = ['Desayuno', 'Comida', 'Cena'];
---

<Layout title="Menú Semanal - MAMBO RECETAS">
  <div class="max-w-7xl mx-auto">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-3xl font-bold text-sky-600">Planificador de Menú Semanal</h1>
      <button
        id="printButton"
        class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-orange-700 transition"
      >
        Descargar PDF
      </button>
    </div>
    
    <div id="menuContent" class="bg-white rounded-lg shadow-md p-6 menu-semanal">
      <table class="w-full border-collapse">
        <thead>
          <tr>
            <th class="border p-2"></th>
            {comidas.map(comida => (
              <th class="border p-2 text-xs font-semibold text-sky-600">{comida}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {diasSemana.map(dia => (
            <tr>
              <td class="border p-2 text-xs font-semibold text-sky-600">{dia}</td>
              {comidas.map((meal, index) => (
                <td class="border p-2">
                  <input
                    type="text"
                    class=" text-xs w-full px-2 py-1 border border-gray-300 rounded-lg"
                    placeholder="Añadir receta..."
                  
                    data-index={index}
                  />
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </div>
</Layout>

<script>
  import { jsPDF } from 'jspdf';
  import html2canvas from 'html2canvas';

  document.addEventListener('DOMContentLoaded', () => {
    const printButton = document.getElementById('printButton');
    const menuContent = document.getElementById('menuContent');

    if (printButton && menuContent) {
      printButton.addEventListener('click', async () => {
        try {
          // Create a temporary container for PDF generation
          const container = document.createElement('div');
          container.style.position = 'fixed';
          container.style.left = '-9999px';
          container.style.top = '0';
          container.style.width = '297mm'; // A4 landscape width
          container.style.backgroundColor = 'white';
          document.body.appendChild(container);

          // Clone the content and replace inputs with text
          const contentClone = menuContent.cloneNode(true) as HTMLElement;
          container.appendChild(contentClone);

          // Replace inputs with text content
          const clonedInputs = contentClone.querySelectorAll('input');
          const originalInputs = menuContent.querySelectorAll('input');
          clonedInputs.forEach((input, index) => {
            const text = document.createElement('div');
            text.textContent = originalInputs[index].value || '';
            text.style.padding = '8px';
            text.style.minHeight = '24px';
            text.style.fontSize = '14px';
            input.parentNode?.replaceChild(text, input);
          });

          // Style the table for PDF
          const table = contentClone.querySelector('table');
          if (table) {
            table.style.width = '100%';
            table.style.borderCollapse = 'collapse';
            
            // Style cells
            const cells = table.querySelectorAll('td, th');
            cells.forEach(cell => {
              (cell as HTMLElement).style.border = '1px solid #666';
              (cell as HTMLElement).style.padding = '8px';
              (cell as HTMLElement).style.textAlign = 'left';
            });
          }

          // Wait for styles to be applied
          await new Promise(resolve => setTimeout(resolve, 200));

          // Generate canvas
          const canvas = await html2canvas(container, {
            scale: 2,
            useCORS: true,
            logging: false,
            backgroundColor: '#ffffff'
          });

          // Create PDF
          const pdf = new jsPDF({
            orientation: 'landscape',
            unit: 'mm',
            format: 'a4'
          });

          // Add the image to PDF with proper dimensions
          const imgData = canvas.toDataURL('image/png');
          pdf.addImage(imgData, 'PNG', 10, 10, 277, 190); // Leave some margins

          // Clean up
          document.body.removeChild(container);

          // Save PDF
          pdf.save('menu-semanal-mambo-recetas.pdf');

        } catch (error) {
          console.error('Error al generar el PDF:', error);
          alert('Hubo un error al generar el PDF. Por favor, inténtalo de nuevo.');
        }
      });

      // Load and save data in localStorage
      const inputs = menuContent.querySelectorAll('input');
      inputs.forEach((input, index) => {
        const savedValue = localStorage.getItem(`menu-item-${index}`);
        if (savedValue) {
          input.value = savedValue;
        }

        input.addEventListener('input', (e) => {
          const target = e.target as HTMLInputElement;
          localStorage.setItem(`menu-item-${index}`, target.value);
        });
      });
    }
  });
</script>

<style>
  @media print {
    body * {
      visibility: hidden;
    }
    #menuContent, #menuContent * {
      visibility: visible;
    }
    #menuContent {
      position: absolute;
      left: 0;
      top: 0;
      width: 100%;
    }
    table {
      width: 100%;
      border-collapse: collapse;
    }
    td, th {
      border: 1px solid #666;
      padding: 8px;
    }
    input {
      border: none !important;
      padding: 8px !important;
    }
  }
</style>
